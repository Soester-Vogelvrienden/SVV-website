---
title: 404
layout: page.njk
description: Deze pagina is niet gevonden.
permalink: 404.html
eleventyExcludeFromCollections: true
---

<style>
	#scene-container {
		width: 100vw;
		max-height: 900px;
		min-height: 90vh;
		border-radius: 0.5rem;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
	}
</style>

<div id="scene-container"></div>

<noscript id="threejs-text">
	404 error, \n Nest not found
</noscript>


<script async src="https://unpkg.com/es-module-shims@1.3.6/dist/es-module-shims.js"></script>

<script type="importmap">
{
	"imports": {
		"three": "https://unpkg.com/three@0.160.1/build/three.module.js"
	}
}
</script>

<script type="module">
	import * as THREE from 'three';
	import { FontLoader } from 'https://cdn.jsdelivr.net/npm/three@0.160.1/examples/jsm/loaders/FontLoader.js';
	import { TextGeometry } from 'https://cdn.jsdelivr.net/npm/three@0.160.1/examples/jsm/geometries/TextGeometry.js';

	// All of your Three.js logic will go here
	const mount = document.getElementById('scene-container');

	// === Scene Setup ===
	const scene = new THREE.Scene();
	scene.background = new THREE.Color(0x87ceeb);
	scene.fog = new THREE.Fog(0x87ceeb, 35, 60);

	const camera = new THREE.PerspectiveCamera(75, mount.clientWidth / mount.clientHeight, 0.1, 1000);
	camera.position.z = 15;
	camera.position.y = 2;

	const renderer = new THREE.WebGLRenderer({ antialias: true });
	renderer.setSize(mount.clientWidth, mount.clientHeight);
	renderer.shadowMap.enabled = true;
	renderer.shadowMap.type = THREE.PCFSoftShadowMap;
	mount.appendChild(renderer.domElement);

	const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);
	scene.add(ambientLight);

	const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
	directionalLight.position.set(5, 10, 7);
	directionalLight.castShadow = true;
	directionalLight.shadow.mapSize.width = 2048;
	directionalLight.shadow.mapSize.height = 2048;
	directionalLight.shadow.camera.near = 0.5;
	directionalLight.shadow.camera.far = 50;
	directionalLight.shadow.camera.left = -20;
	directionalLight.shadow.camera.right = 20;
	directionalLight.shadow.camera.top = 20;
	directionalLight.shadow.camera.bottom = -20;
	directionalLight.shadow.bias = -0.0005;
	directionalLight.intensity = 1.8;
	scene.add(directionalLight);

	const cubeRenderTarget = new THREE.WebGLCubeRenderTarget(256, {
		format: THREE.RGBAFormat,
		generateMipmaps: true,
		minFilter: THREE.LinearMipmapLinearFilter,
	});
	
	const cubeCamera = new THREE.CubeCamera(0.1, 1000, cubeRenderTarget);

	// 3D Text
	const textContent = document.getElementById('threejs-text').textContent.trim().replace(/\\n/g, '\n');;

	const fontLoader = new FontLoader();
	fontLoader.load('https://threejs.org/examples/fonts/helvetiker_bold.typeface.json', function (font) {
		const textGeometry = new TextGeometry(textContent, {
			font: font,
			size: 1.5,
			height: 0.4,
			bevelEnabled: true,
			bevelThickness: 0.05,
			bevelSize: 0.03,
			bevelSegments: 4
		});

		textGeometry.computeBoundingBox();
		const centerOffsetX = -0.5 * (textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x);
		const centerOffsetY = -0.5 * (textGeometry.boundingBox.max.y - textGeometry.boundingBox.min.y);


		const textMaterial = new THREE.MeshStandardMaterial({ color: 0xffffff, roughness: 0, metalness: 0.1 , envMap: null});
		const textMesh = new THREE.Mesh(textGeometry, textMaterial);
		textMesh.position.set(centerOffsetX, 3 + centerOffsetY, 0);
		textMesh.castShadow = true;
		textMesh.add(cubeCamera);
		textMaterial.envMap = cubeRenderTarget.texture;

		scene.add(textMesh);
	});

	// === Ground ===
	const groundSize = 300;
	const groundGeometry = new THREE.PlaneGeometry(groundSize, groundSize, 32, 32);
	const groundMaterial = new THREE.MeshLambertMaterial({ color: 0x4a8c3f, side: THREE.DoubleSide });
	const ground = new THREE.Mesh(groundGeometry, groundMaterial);
	ground.rotation.x = -Math.PI / 2;
	ground.position.y = -5;
	ground.receiveShadow = true;
	scene.add(ground);

	// === Grass Patch ===
	function createGrassPatch(x, z, patchSize, density) {
		const group = new THREE.Group();
		group.position.set(x, -5, z);

		for (let i = 0; i < density; i++) {
			const posX = (Math.random() - 0.5) * patchSize;
			const posZ = (Math.random() - 0.5) * patchSize;
			const height = 0.3 + Math.random() * 0.7;
			const width = 0.05 + Math.random() * 0.1;

			const bladeGeometry = new THREE.PlaneGeometry(width, height);
			bladeGeometry.translate(0, height / 2, 0);

			const colorVariation = Math.random() * 0.2;
			const grassColor = new THREE.Color(0.2 + colorVariation, 0.5 + colorVariation, 0.1 + colorVariation);

			const bladeMaterial = new THREE.MeshLambertMaterial({ color: grassColor, side: THREE.DoubleSide });

			const blade = new THREE.Mesh(bladeGeometry, bladeMaterial);
			blade.position.set(posX, 0, posZ);
			blade.rotation.y = Math.random() * Math.PI;
			blade.rotation.x = (Math.random() - 0.5) * 0.2;
			blade.rotation.z = (Math.random() - 0.5) * 0.2;
			blade.castShadow = true;
			blade.receiveShadow = true;

			group.add(blade);
		}

		return group;
	}

	for (let i = 0; i < 25; i++) {
		const x = (Math.random() - 0.5) * 60;
		const z = (Math.random() - 0.5) * 60;
		const patchSize = 4 + Math.random() * 6;
		const density = 40 + Math.floor(Math.random() * 60);

		const grassPatch = createGrassPatch(x, z, patchSize, density);
		scene.add(grassPatch);
	}

	// === Tree ===
	function createTree(x, z, height) {
		const group = new THREE.Group();
		group.position.set(x, -5, z);

		const trunkGeometry = new THREE.CylinderGeometry(0.5, 0.7, height * 0.4, 8);
		const trunkMaterial = new THREE.MeshLambertMaterial({ color: 0x8B4513 });
		const trunk = new THREE.Mesh(trunkGeometry, trunkMaterial);
		trunk.position.y = height * 0.2;
		trunk.castShadow = true;
		trunk.receiveShadow = true;
		group.add(trunk);

		const foliageSegments = 3;
		const foliageHeight = height * 0.6;
		const segmentHeight = foliageHeight / foliageSegments;

		for (let i = 0; i < foliageSegments; i++) {
			const layerSize = 2.5 - (i * 0.5);
			const foliageGeometry = new THREE.ConeGeometry(layerSize, segmentHeight * 1.2, 8);
			const shade = 0.4 + Math.random() * 0.2;
			const foliageMaterial = new THREE.MeshLambertMaterial({ color: new THREE.Color(0.2, 0.4 + shade, 0.2) });
			const foliageLayer = new THREE.Mesh(foliageGeometry, foliageMaterial);
			foliageLayer.position.y = height * 0.4 + (i * segmentHeight);
			foliageLayer.castShadow = true;
			foliageLayer.receiveShadow = true;
			group.add(foliageLayer);
		}

		return group;
	}

	for (let i = 0; i < 15; i++) {
		const angle = (i / 15) * Math.PI * 2;
		const distance = 25 + Math.random() * 15;
		const x = Math.cos(angle) * distance;
		const z = Math.sin(angle) * distance;
		const treeHeight = 8 + Math.random() * 4;
		const tree = createTree(x, z, treeHeight);
		tree.rotation.y = Math.random() * Math.PI * 2;
		scene.add(tree);
	}

	// === Bird ===
	function createBird(color, startPosition) {
		const group = new THREE.Group();

		const bodyGeometry = new THREE.SphereGeometry(0.3, 16, 16);
		bodyGeometry.scale(1.5, 1, 1);
		const bodyMaterial = new THREE.MeshPhongMaterial({ color });
		const body = new THREE.Mesh(bodyGeometry, bodyMaterial);
		body.castShadow = true;
		body.receiveShadow = true;
		group.add(body);

		const headGeometry = new THREE.SphereGeometry(0.25, 16, 16);
		const head = new THREE.Mesh(headGeometry, bodyMaterial);
		head.position.set(0.4, 0.1, 0);
		group.add(head);

		const eyeGeometry = new THREE.SphereGeometry(0.05, 8, 8);
		const eyeMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });
		const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial);
		rightEye.position.set(0.5, 0.15, 0.15);
		group.add(rightEye);
		const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial);
		leftEye.position.set(0.5, 0.15, -0.15);
		group.add(leftEye);

		const beakGeometry = new THREE.ConeGeometry(0.1, 0.3, 8);
		const beakMaterial = new THREE.MeshPhongMaterial({ color: 0xff9900 });
		const beak = new THREE.Mesh(beakGeometry, beakMaterial);
		beak.rotation.z = -Math.PI / 2;
		beak.position.set(0.7, 0.1, 0);
		group.add(beak);

		const wingGeometry = new THREE.BoxGeometry(0.7, 0.05, 0.6);
		wingGeometry.translate(0, 0, 0.3);
		const wingMaterial = new THREE.MeshPhongMaterial({ color });

		const rightWing = new THREE.Mesh(wingGeometry, wingMaterial);
		rightWing.position.set(0, 0.2, 0);
		group.add(rightWing);

		const leftWing = new THREE.Mesh(wingGeometry.clone(), wingMaterial);
		leftWing.position.set(0, 0.2, 0);
		leftWing.rotation.x = Math.PI;
		group.add(leftWing);

		const tailGeometry = new THREE.BoxGeometry(0.4, 0.1, 0.3);
		const tail = new THREE.Mesh(tailGeometry, wingMaterial);
		tail.position.set(-0.5, 0, 0);
		group.add(tail);

		group.position.set(startPosition.x, startPosition.y, startPosition.z);
		group.userData = {
			speed: 2.25 + Math.random() * 0.80,
			wingFlapSpeed: 2.15 + Math.random() * 0.3,
			wingFlapAmplitude: 0.8 + Math.random() * 0.3,
			waveOffset: Math.random() * Math.PI * 2,
			circleRadius: 8 + Math.random() * 4,
			circleHeight: 1 + Math.random() * 4,
			angle: Math.random() * Math.PI * 2,
			rightWing,
			leftWing,
			verticalOffset: Math.random() * Math.PI * 2
		};

		return group;
	}

	const birdColors = [0x00ff00, 0x3399ff, 0xff3399, 0xffcc00, 0xff6600, 0x9966ff];
	const birds = [];

	for (let i = 0; i < 12; i++) {
		const angle = (i / 8) * Math.PI * 2;
		const radius = 8 + Math.random() * 4;
		const pos = { x: Math.cos(angle) * radius, y: 3 + Math.random() * 4, z: Math.sin(angle) * radius };
		const bird = createBird(birdColors[i % birdColors.length], pos);
		bird.userData.angle = angle;
		birds.push(bird);
		scene.add(bird);
	}

	let lastTime = 0;
	function animate(currentTime = 0) {
		currentTime *= 0.001;
		const deltaTime = lastTime ? currentTime - lastTime : 0.016;
		lastTime = currentTime;

		const clampedDelta = Math.min(deltaTime, 0.1);

		birds.forEach(bird => {
			const d = bird.userData;
			d.angle += d.speed * clampedDelta * 0.2;

			const newAngle = d.angle;
			bird.position.x = Math.cos(newAngle) * d.circleRadius;
			bird.position.z = Math.sin(newAngle) * d.circleRadius;
			bird.position.y = d.circleHeight + Math.sin(currentTime + d.verticalOffset) * d.circleHeight * 0.1;

			bird.rotation.y = -newAngle - Math.PI / 2;
			bird.rotation.z = Math.sin(newAngle) * 0.2;
			bird.rotation.x = Math.sin(currentTime + d.waveOffset) * 0.1;

			const wingFlapRotation = Math.sin(currentTime * d.wingFlapSpeed * 3) * d.wingFlapAmplitude;
			d.rightWing.rotation.x = wingFlapRotation;
			d.leftWing.rotation.x = Math.PI - wingFlapRotation;
		});

		renderer.render(scene, camera);
		requestAnimationFrame(animate);
	}

	cubeCamera.update(renderer, scene);
	animate();

	window.addEventListener('resize', () => {
		camera.aspect = mount.clientWidth / mount.clientHeight;
		camera.updateProjectionMatrix();
		renderer.setSize(mount.clientWidth, mount.clientHeight);
	});
</script>